/*
 * MIT License
 *
 * Copyright (c) 2020 Edumate
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// System Library

fun clock(){
    return native("lang.builtins","clock");
}

fun isNone(obj){
    return type(obj)=="<NoneType>";
}

fun isNumber(obj){
    return type(obj)=="<NumberType>";
}

fun isList(obj){
    return type(obj)=="<ListType>";
}

fun isBool(obj){
    return type(obj)=="<BoolType>";
}

fun isString(obj){
    return type(obj)=="<StringType>";
}

fun print(*str=[""],sep=' ',end='\n'){
    // Prints the first element which is always present
    native("lang.builtins","print",params=[String(str[0])]);
    
    // Loop through rest of the elements along with printing of separator 
    for(var i=1;i<len(str);i=i+1){
    	native("lang.builtins","print",params=[String(sep)+String(str[i])]);
    }
    
    // Print the end
    native("lang.builtins","print",params=[String(end)]);
}

fun input(*str=[""],sep=' ',end=''){
    print(str=str, sep=sep, end=end);
    return native("lang.builtins","input");
}

fun exit(status=0){
    if(!isNumber(status)) error("Argument status must be of type Number");
    native("lang.builtins","exit",params=[status]);
}

fun run(fn){
    native("lang.builtins","run",params=[String(fn)]);
}

fun len(obj){
    if(isString(obj) or isList(obj)) return native("lang.builtins","len",params=[obj]);
    error(type(obj) + " has no length.");
}

fun type(obj){
    return native("lang.builtins","type",params=[obj]);
}

fun error(msg=""){
    return native("lang.builtins","error",params=[String(msg)]);
}

fun warn(msg=""){
    return native("lang.builtins","warn",params=[String(msg)]);
}